##
##  devtool.conf -- Development Tool Configuration for RPM 5
##

%common
    MODULE_NAMES=""
    MODULE_TAG_BASH=""		# XXX bash is GPLv2 and cannot be bundled w RPM
    MODULE_TAG_BEECRYPT="rpm-5_4"
    MODULE_TAG_DB=""
    MODULE_TAG_FICL=""
    MODULE_TAG_FILE=""
    MODULE_TAG_GPSEE=""
    MODULE_TAG_JS_SRC=""
    MODULE_TAG_LIBGIT2=""
    MODULE_TAG_LIBTPM=""
    MODULE_TAG_LUA="rpm-5_4"
    MODULE_TAG_NEON=""
    MODULE_TAG_PCRE=""
    MODULE_TAG_PERL_URPM=""
    MODULE_TAG_POPT=""
    MODULE_TAG_RC=""
    MODULE_TAG_SYCK="rpm-5_4"
    MODULE_TAG_XAR=""
    MODULE_TAG_XZ=""

## https://github.com/OpenMandrivaSoftware/perl-URPM
## https://github.com/dvidelabs/flatcc.git
## https://github.com/facebook/zstd.git
## https://github.com/lz4/lz4.git
## https://github.com/google/brotli.git
## https://github.com/google/snappy
## https://github.com/lzfse/lzfse.git
## https://github.com/andikleen/snappy-c.git
## https://github.com/LMDB/lmdb.git
    MOZJS_VERSION=45.9.0esr
    MOZJS_TARBALL=firefox-${MOZJS_VERSION}.source.tar.xz
    MOZJS_URL=https://ftp.mozilla.org/pub/mozilla.org/firefox/releases/${MOZJS_VERSION}/source/${MOZJS_TARBALL}
## http://www.oberhumer.com/opensource/lzo/download/lzo-2.10.tar.gz
    LZO_VERSION=2.10
    LZO_TARBALL=lzo-${LZO_VERSION}.tar.gz
    LZO_URL=http://www.oberhumer.com/opensource/lzo/download/${LZO_TARBALL}

%checkout
    for name in $MODULE_NAMES "$@"; do
      case "${name}" in
      lzo)
            echo "===> ${name}"
            if [ ! -f ${DEVTOOL_SRCDIR}/${LZO_TARBALL} ]; then
                cmd="wget -q ${LZO_URL}"
                echo "     $cmd"
                (cd ${DEVTOOL_SRCDIR} && $cmd)
            fi
            if [ ! -d ${DEVTOOL_SRCDIR}/lzo ]; then
                cmd="tar xf ${LZO_TARBALL}"
                echo "     $cmd"
                (cd ${DEVTOOL_SRCDIR} && $cmd)
                cmd="mv ${name}-${LZO_VERSION} ${name}"
                echo "     $cmd"
                (cd ${DEVTOOL_SRCDIR} && $cmd)
            fi
        ;;
      mozjs)
            [ ! -d ${DEVTOOL_SRCDIR}/js ] && continue
            echo "===> ${name} (in ${DEVTOOL_SRCDIR}/js)"
            if [ ! -f ${DEVTOOL_SRCDIR}/js/${MOZJS_TARBALL} ]; then
                cmd="wget -q ${MOZJS_URL}"
                echo "     $cmd"
                (cd ${DEVTOOL_SRCDIR}/js && $cmd)
            fi
            if [ ! -d ${DEVTOOL_SRCDIR}/js/mozilla-release ]; then
                cmd="tar xf ${MOZJS_TARBALL}"
                echo "     $cmd"
                (cd ${DEVTOOL_SRCDIR}/js && $cmd)
                cmd="mv firefox-${MOZJS_VERSION} mozilla-release"
                echo "     $cmd"
                (cd ${DEVTOOL_SRCDIR}/js && $cmd)
            fi
        ;;
      lmdb)
            if [ -d ${DEVTOOL_SRCDIR}/${name}/.git ]; then
                cmd="git pull"
                echo "===> ${name} (${cmd})"
                ( cd ${DEVTOOL_SRCDIR}/${name} && ${cmd} )
            else
                cmd="git clone git://github.com/LMDB/lmdb.git ${name}"
                echo "===> ${name} (${cmd})"
                ( cd ${DEVTOOL_SRCDIR} && ${cmd} )
            fi
        ;;
      lzfse)
            if [ -d ${DEVTOOL_SRCDIR}/${name}/.git ]; then
                cmd="git pull"
                echo "===> ${name} (${cmd})"
                ( cd ${DEVTOOL_SRCDIR}/${name} && ${cmd} )
            else
                cmd="git clone git://github.com/lzfse/lzfse.git ${name}"
                echo "===> ${name} (${cmd})"
                ( cd ${DEVTOOL_SRCDIR} && ${cmd} )
            fi
        ;;
      snappy)
            if [ -d ${DEVTOOL_SRCDIR}/${name}/.git ]; then
                cmd="git pull"
                echo "===> ${name} (${cmd})"
                ( cd ${DEVTOOL_SRCDIR}/${name} && ${cmd} )
            else
                cmd="git clone git://github.com/google/snappy ${name}"
                echo "===> ${name} (${cmd})"
                ( cd ${DEVTOOL_SRCDIR} && ${cmd} )
            fi
        ;;
      brotli)
            if [ -d ${DEVTOOL_SRCDIR}/${name}/.git ]; then
                cmd="git pull"
                echo "===> ${name} (${cmd})"
                ( cd ${DEVTOOL_SRCDIR}/${name} && ${cmd} )
            else
                cmd="git clone git://github.com/google/brotli.git ${name}"
                echo "===> ${name} (${cmd})"
                ( cd ${DEVTOOL_SRCDIR} && ${cmd} )
            fi
        ;;
      lz4)
            if [ -d ${DEVTOOL_SRCDIR}/${name}/.git ]; then
                cmd="git pull"
                echo "===> ${name} (${cmd})"
                ( cd ${DEVTOOL_SRCDIR}/${name} && ${cmd} )
            else
                cmd="git clone git://github.com/lz4/lz4.git ${name}"
                echo "===> ${name} (${cmd})"
                ( cd ${DEVTOOL_SRCDIR} && ${cmd} )
            fi
        ;;
      zstd)
            if [ -d ${DEVTOOL_SRCDIR}/${name}/.git ]; then
                cmd="git pull"
                echo "===> ${name} (${cmd})"
                ( cd ${DEVTOOL_SRCDIR}/${name} && ${cmd} )
            else
                cmd="git clone git://github.com/facebook/zstd.git ${name}"
                echo "===> ${name} (${cmd})"
                ( cd ${DEVTOOL_SRCDIR} && ${cmd} )
            fi
        ;;
      flatcc)
            if [ -d ${DEVTOOL_SRCDIR}/${name}/.git ]; then
                cmd="git pull"
                echo "===> ${name} (${cmd})"
                ( cd ${DEVTOOL_SRCDIR}/${name} && ${cmd} )
            else
                cmd="git clone git://github.com/dvidelabs/flatcc.git ${name}"
                echo "===> ${name} (${cmd})"
                ( cd ${DEVTOOL_SRCDIR} && ${cmd} )
            fi
        ;;
      gnulib)
            if [ -d ${DEVTOOL_SRCDIR}/.${name}/.git ]; then
                cmd="git pull"
                echo "===> ${name} (${cmd})"
                ( cd ${DEVTOOL_SRCDIR}/.${name} && ${cmd} )
            else
                cmd="git clone git://git.savannah.gnu.org/gnulib.git .${name}"
                echo "===> ${name} (${cmd})"
                ( cd ${DEVTOOL_SRCDIR} && ${cmd} )
            fi
        ;;
      libgit2)
            if [ -d ${DEVTOOL_SRCDIR}/${name}/.git ]; then
                cmd="git pull"
                echo "===> ${name} (${cmd})"
                ( cd ${DEVTOOL_SRCDIR}/${name} && ${cmd} )
            else
                cmd="git clone git://github.com/libgit2/libgit2.git"
                echo "===> ${name} (${cmd})"
                ( cd ${DEVTOOL_SRCDIR} && ${cmd} )
            fi
        ;;
      gpsee)
            if [ -d ${DEVTOOL_SRCDIR}/${name}/.hg ]; then
	        cmd="hg pull"
                echo "===> ${name} (${cmd})"
                ( cd ${DEVTOOL_SRCDIR}/${name} && ${cmd} )
	        cmd="hg up"
                echo "===> ${name} (${cmd})"
                ( cd ${DEVTOOL_SRCDIR}/${name} && ${cmd} )
            else
	        cmd="hg clone https://bitbucket.org/wesgarland/gpsee-rpm gpsee"
                echo "===> ${name} (${cmd})"
                ( cd ${DEVTOOL_SRCDIR} && ${cmd} )
	    fi
        ;;
      perl-URPM)
            if [ -d ${DEVTOOL_SRCDIR}/${name}/.git ]; then
                cmd="git pull"
                echo "===> ${name} (${cmd})"
                ( cd ${DEVTOOL_SRCDIR}/${name} && ${cmd} && \
                  cp ../scripts/URPM-Makefile.am ./Makefile.am && \
                  cp ../scripts/URPM-Makefile.PL.in ./Makefile.PL.in \
                )
            else
                cmd="git clone https://github.com/OpenMandrivaSoftware/perl-URPM"
                echo "===> ${name} (${cmd})"
                ( cd ${DEVTOOL_SRCDIR} && ${cmd} && \
                  cp scripts/URPM-Makefile.am ${name}/Makefile.am && \
                  cp scripts/URPM-Makefile.PL.in ${name}/Makefile.PL.in \
                )
            fi
        ;;
      *)
        release=MODULE_TAG_`echo ${name} | tr '[a-z/\-]' '[A-Z__]'`
        release=`eval echo \\$${release}`
        if [ ".${release}" = . ]; then
            if [ -d ${DEVTOOL_SRCDIR}/${name}/CVS ]; then
                echo "===> ${name} (cvs up HEAD)"
                ( cd ${DEVTOOL_SRCDIR}/${name} && cvs -q up -A -P -d )
            else
                echo "===> ${name} (cvs co HEAD)"
                ( cd ${DEVTOOL_SRCDIR} && cvs co -A -d ${name} ${name} )
            fi
        else
            if [ -d ${DEVTOOL_SRCDIR}/${name}/CVS ]; then
                echo "===> ${name} (cvs up ${release})"
                ( cd ${DEVTOOL_SRCDIR}/${name} && cvs -q up -P -d -r${release} )
            else
                echo "===> ${name} (cvs co ${release})"
                ( cd ${DEVTOOL_SRCDIR} && cvs co -r${release} -d ${name} ${name} )
            fi
        fi
	;;
      esac
      echo "<=== ${name}"
    done

%autogen
    ( cd ${DEVTOOL_SRCDIR} && sh autogen.sh )

%configure
    ${DEVTOOL_SRCDIR}/configure \
        --verbose \
        "$@"

%make
    #   intentionally just a pass-through target
    #   (important for use with devtool.bashrc)
    make "$@"

%prepare
    %checkout
    %autogen
    %configure "$@"

# --- CentOS 7
%c7
    export _usr=/usr
    export _sysconfdir=/etc
    export _var=/var
    export _libdir=/usr/lib64
    export _target_platform=x86_64-redhat-linux-gnu
    export CPPFLAGS="$CPPFLAGS -DLUA_COMPAT_APIINTCASTS"
    %autogen
    %configure \
        --prefix="${_usr}" \
        --sysconfdir="${_sysconfdir}" \
        --localstatedir="${_var}" \
        --sharedstatedir="${_var}/lib" \
        --libdir="${_libdir}" \
        --build="${_target_platform}" \
        --host="${_target_platform}" \
        --with-vendor=redhat \
        --with-external-db \
        --with-lua \
        --with-selinux \
        --with-cap \
        --with-acl \
        --enable-ndb \
        --enable-python \
        --enable-silent-rules \
        --with-crypto=openssl \
        --with-uuid \
        --with-lmdb \
        --with-zstd \
        --with-libeio

%c7-sanitize
    #export CFLAGS="$CFLAGS -fsanitize=address -fsanitize=undefined"
    export CFLAGS="$CFLAGS -fsanitize=address"
    %c7
